package com.jzt.sonar.java.checks;

/**
 * 校验类型常量
 * <p>
 * 作者：lizw <br/>
 * 创建时间：2019/11/22 17:29 <br/>
 */
public class CheckTypeConstant {
    private static final String PREFIX = "【";
    private static final String SUFFIX = "】-->";

    /**
     * 命名
     */
    public static final String NAMED = PREFIX + "命名" + SUFFIX;
    /**
     * 注释
     */
    public static final String COMMENT = PREFIX + "注释" + SUFFIX;
    /**
     * 日志
     */
    public static final String LOG = PREFIX + "日志" + SUFFIX;
    /**
     * 性能
     */
    public static final String PERFORMANCE = PREFIX + "性能" + SUFFIX;
//    /**
//     *
//     */
//    public static final String NAMED = PREFIX + "命名" + SUFFIX;
}


//
//https://github.com/SonarSource/sonar-java/blob/master/docs/CUSTOM_RULES_101.md
//
//
//  info 提示
//  minor 次要
//  major 只要
//  critical 严重
//  blocker 阻断
//
//  https://github.com/wychenzhou/sonarqube_java_custom_rule


//一、要求
//命名
//
//【强制】类名、方法名、成员变量采用标准驼峰规则。类名首字母大写，方法名、成员变量首字母小写 OK
//【强制】终态变量命名采用全大写以下划线分割 OK
//-----------------------------------------------------------------------------------------------------------------------------------------
//【推荐】各种命名必须表意准确、尽可能短，除2代替‘to’，4代替‘for’外，不建议在命名中使用数字
//【推荐】通过方法名称要能识别方法的作用
//
//注释
//
//【强制】方法注释需要对各参数、返回值、异常、方法执行过程进行说明，要做到通过方法注释就能辨别方法是否适用
//【强制】代码中存在临时解决方法后续要优化的必须注明TODO
//-----------------------------------------------------------------------------------------------------------------------------------------
//【推荐】类注释、方法注释采用统一format规范文件 OK
//【推荐】关键代码方法内要加上注释对局部代码块作出解释
//
//
//代码结构、代码风格、代码控制
//
//【强制】controller用于参数、返回值的验证及封装，service用于业务逻辑的封装
//【强制】一个方法只做明确的一件事情，单个方法不能超过100行 OK
//【强制】代码中需要用到的数字、字符串标识必须定义成常量或枚举类型没使用，方便代码阅读
//【强制】代码必须采取措施避免运行时错误（如下标越界、分母为零、堆栈溢出）
//【强制】代码中循环需要有明显的退出条件，不能使用goto这样的语句，避免出现死循环
//【强制】递归需要有详细的注释说明递归的目的以及退出条件，避免无限递归问题
//【强制】在涉及到资源占用如获取链接、IO等情况时，必须确保资源能及时释放
//【强制】没有用到或不再用到的变量及方法要删除
//【强制】禁止使用构造方法 BigDecimal(double)
//-----------------------------------------------------------------------------------------------------------------------------------------
//【推荐】方法尽量用常用类型和实体类作为参数，少用Map类型
//【推荐】同一段代码块如果出现两次，需要封装成方法。
//【推荐】代码尽量保持可读性，一个class文件中的代码不要超过600行
//
//
//日志
//
//【强制】try-catch代码必须进行日志记录 OK
//【强制】禁止使用e.printStackTrace(); OK
//-----------------------------------------------------------------------------------------------------------------------------------------
//【推荐】关键业务代码要进行日志打印
//【推荐】日志信息脱敏
//【推荐】日志级别
//
//性能
//
//【强制】在只有读操作的接口中，如果不存在写-读连续操作，必须使用读写分离读库
//【强制】在适当的业务操作上添加数据库事务，必要确认事务隔离级别、传播级别的合理性
//【强制】在事务中，对需要insert或update的数据通过变量进行存储，在最后进行集中的insert或update操作，减少锁表时间
//【强制】嵌套循环禁止操过三层
//【强制】选择redis存储，对value的最大值必须进行评估和限制。在redis单个key的value过大的时候，频繁地查询key会导致redis影响慢
//【强制】使用Executors.newCachedThreadPool(),注意仅run短期异步任务(一般执行时长不能超过100ms),否则请使用newFixedThreadPool或其他统一提供的线程池
//-----------------------------------------------------------------------------------------------------------------------------------------
//【推荐】避免无意义的对象拷贝，尽量复用实体对象
//【推荐】避免在调用es索引的时候，使用`*`
//【推荐】循环体中的语句要考量性能，一些影响性能的操作尽量放到循环体外，如：定义对象、变量、获取连接、不必要的try-catch操作
//【推荐】在多层循环代码中要考量性能，估算程序最终循环次数，避免因循环过多导致cpu性能问题
//【推荐】选择redis存储要评估性能，并根据业务场景进行性能测试。
//【推荐】高流量页面数据库操作可用缓存应优先考虑使用缓存
//【推荐】对Map循环迭代时.如果同时需要主键与取值应该使用迭代entrySet()
//【推荐】使用Collection.isEmpty()检测空
//【推荐】明确集合大小时,在初始化时尽量指定集合大小
//【推荐】频繁调用Collection.contains(或者containAll)时,如果可以替换成Set尽量使用Set
//【推荐】使用es索引查询数据时,明确获取字段source,尽量避免查询返回所有source



